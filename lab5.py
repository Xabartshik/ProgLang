from collections import defaultdict, deque
from lib.CFGParser import Grammar
from dataclasses import dataclass
import sys
import io
import datetime
from contextlib import contextmanager

LOGFILENAME = "lab5_log.txt"

class Tee(io.TextIOBase):
    def __init__(self, *streams):
        self.streams = streams

    def write(self, s):
        for st in self.streams:
            st.write(s)
            st.flush()
        return len(s)

    def flush(self):
        for st in self.streams:
            st.flush()

@contextmanager
def tee_stdout(*streams):
    old_stdout = sys.stdout
    try:
        sys.stdout = Tee(*streams)
        yield
    finally:
        sys.stdout = old_stdout

def hr(char="=", width=70):
    print(char * width)

def title(text):
    hr()
    print(f" {text}")
    hr()

def section(text):
    print()
    hr(".", 50)
    print(f" {text}")
    hr(".", 50)

def sub(text):
    print(f"   {text}")

def rule(lhs, rhslist, arrow=" -> "):
    for rhs in rhslist:
        r = " ".join(rhs) if isinstance(rhs, (list, tuple)) else rhs
        if not rhs:
            r = "Œµ"
        print(f"      {lhs}{arrow}{r}")

def format_comparison_result(isequivalent, grammar1name, grammar2name, methoddescription=""):
    hr("-", 50)
    if isequivalent:
        print("‚úì –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã ‚úì")
        print(f"  {grammar1name} ‚â° {grammar2name}")
        if methoddescription:
            print(f"  ({methoddescription})")
        print("   üéâ ", "üéâ ", "üéâ ")
    else:
        print("‚úó –ù–ï —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã ‚úó")
        print(f"  {grammar1name} ‚â¢ {grammar2name}")
        if methoddescription:
            print(f"  ({methoddescription})")
        print("   ‚ùå ", "‚ùå ", "‚ùå ")
    hr("-", 50)
    print()

def compare_and_display(g1, g2, g1name, g2name, description="", maxlength=5):
    strings1 = g1.generate_strings(maxlength)
    strings2 = g2.generate_strings(maxlength)

    isequivalent = (set(strings1) == set(strings2))

    print(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤: {g1name} vs {g2name}")
    if description:
        print(f"–ú–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {description}")

    print(f"\n–¶–µ–ø–æ—á–∫–∏ –∏–∑ L({g1name}) –¥–æ –¥–ª–∏–Ω—ã {maxlength}:")
    all_lengths1 = defaultdict(list)
    for s in strings1:
        if s == '':
            all_lengths1[0].append("Œµ")
        else:
            all_lengths1[len(s)].append(s)

    for length in range(maxlength + 1):
        if length in all_lengths1:
            print(f"–î–ª–∏–Ω–∞ {length}: {' '.join(sorted(all_lengths1[length]))}")

    print(f"\n–¶–µ–ø–æ—á–∫–∏ –∏–∑ L({g2name}) –¥–æ –¥–ª–∏–Ω—ã {maxlength}:")
    all_lengths2 = defaultdict(list)
    for s in strings2:
        if s == '':
            all_lengths2[0].append("Œµ")
        else:
            all_lengths2[len(s)].append(s)

    for length in range(maxlength + 1):
        if length in all_lengths2:
            print(f"–î–ª–∏–Ω–∞ {length}: {' '.join(sorted(all_lengths2[length]))}")

    format_comparison_result(isequivalent, g1name, g2name, description)

def main():
    with open(LOGFILENAME, 'w', encoding='utf-8') as logfile:
        with tee_stdout(sys.stdout, logfile):
            section("–ó–ê–î–ê–ù–ò–ï 1: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏")

            print("–î–∞–Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:")
            print()
            print("S ‚Üí S0 | S1 | P0 | P1")
            print("P ‚Üí N.")
            print("N ‚Üí 0 | 1 | N0 | N1")
            print()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
            nonterminals = {'S', 'P', 'N'}
            terminals = {'0', '1', '.'}
            productions = {
                'S': [['S', '0'], ['S', '1'], ['P', '0'], ['P', '1']],
                'P': [['N', '.']],
                'N': [['0'], ['1'], ['N', '0'], ['N', '1']]
            }
            startsymbol = 'S'

            g = Grammar(nonterminals, terminals, productions, startsymbol)

            print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ:")
            g.display_info()

            print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:")
            print(f"  - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–µ–≤–æ–ª–∏–Ω–µ–π–Ω–æ–π: {g.is_left_linear()}")
            print(f"  - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∞–≤–æ–ª–∏–Ω–µ–π–Ω–æ–π: {g.is_right_linear()}")
            print(f"  - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π: {g.is_regular()}")

            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
            section("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π")
            print("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–∑ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å–æ–±–∏—è:")
            print()
            print("1. –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
            print("   - H (–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)")
            print("   - S, P, N (–ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–∞)")
            print()
            print("2. –°—Ç—Ä–æ–∏–º –ø–µ—Ä–µ—Ö–æ–¥—ã:")
            print("   - –î–ª—è –ø—Ä–∞–≤–∏–ª –≤–∏–¥–∞ W ‚Üí t: –¥—É–≥–∞ H ‚Üí W —Å –º–µ—Ç–∫–æ–π t")
            print("   - –î–ª—è –ø—Ä–∞–≤–∏–ª –≤–∏–¥–∞ W ‚Üí Vt: –¥—É–≥–∞ V ‚Üí W —Å –º–µ—Ç–∫–æ–π t")
            print()

            ds = g.build_state_diagram()

            print("–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
            ds.display()
            ds.draw_state_diagram_svg()
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–µ–∫
            section("–†–∞–∑–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ø–æ—á–µ–∫")

            test_strings = ["11.010", "0.1", "01.", "100"]

            for test_str in test_strings:
                print(f"\n–†–∞–∑–±–æ—Ä —Ü–µ–ø–æ—á–∫–∏ '{test_str}':")
                result = ds.parse(test_str)
                if result:
                    print(f"  ‚úì –¶–µ–ø–æ—á–∫–∞ '{test_str}' –ü–†–ò–ù–ò–ú–ê–ï–¢–°–Ø")
                    print(f"    –ü—É—Ç—å —Ä–∞–∑–±–æ—Ä–∞: {' ‚Üí '.join(result['path'])}")
                else:
                    print(f"  ‚úó –¶–µ–ø–æ—á–∫–∞ '{test_str}' –û–¢–ö–õ–û–ù–Ø–ï–¢–°–Ø")

            # –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞
            section("–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä–æ–∂–¥–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞")

            print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ —è–∑—ã–∫–∞ (–¥–æ –¥–ª–∏–Ω—ã 8):")
            generated_strings = g.generate_strings(8)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–∞–º
            by_length = defaultdict(list)
            for s in generated_strings:
                if s == '':
                    by_length[0].append("Œµ")
                else:
                    by_length[len(s)].append(s)

            for length in sorted(by_length.keys()):
                if by_length[length]:
                    print(f"–î–ª–∏–Ω–∞ {length}: {' '.join(sorted(by_length[length])[:20])}")
                    if len(by_length[length]) > 20:
                        print(f"           ... –∏ –µ—â—ë {len(by_length[length])-20} —Ü–µ–ø–æ—á–µ–∫")

            print("\n–û–ø–∏—Å–∞–Ω–∏–µ —è–∑—ã–∫–∞:")
            print("–î–∞–Ω–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ –ø–æ—Ä–æ–∂–¥–∞–µ—Ç —è–∑—ã–∫ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
            print("–Ø–∑—ã–∫ L(G) = {—Ü–µ–ø–æ—á–∫–∏ –≤–∏–¥–∞ d‚ÇÅd‚ÇÇ...d‚Çô.d_{n+1}d_{n+2}...d_m, –≥–¥–µ d·µ¢ ‚àà {0,1}}")
            print("–¢–æ –µ—Å—Ç—å –¥–≤–æ–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–æ–π.")
            print("–ü—Ä–∏–º–µ—Ä—ã: 0.1, 11.010, 101.001, 1.0, –∏ —Ç.–¥.")
            print("\n–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤", LOGFILENAME)

if __name__ == "__main__":
    main()
